BitChannelSyntax で述べなかった文法の詳細について記述します。

== インラインイメージ

img タグを使って画像をその場に表示したいときは
[[img: 〜 ]] で囲みます。

記述例
{{{
[[img:http://i.loveruby.net/images/bluelogoS.png]]
}}}

結果
[[img:http://i.loveruby.net/images/bluelogoS.png]]

InterWiki も使えます。

記述例
{{{
[[img:lrnimages:bluelogoS.png]]
}}}

結果
[[img:lrnimages:bluelogoS.png]]

なお、いずれの場合もファイルの拡張子が画像っぽくないと展開しません。

== 箇条書きの折り返し

箇条書きの途中では折り返して書けます。

記述例
{{{
  * これは最初の項目なんですが長いので途中で折り返します。
    こんなふうに。
  * 空白で始まっているかどうかしか見ないので
           こんなふうに
       インデントは
    全然関係ありません。
  * ただし途中に空行を入れると
        リストが終わってしまうので
    気をつけてください。
}}}

結果

  * これは最初の項目なんですが長いので途中で折り返します。
    こんなふうに。
  * 空白で始まっているかどうかしか見ないので
           こんなふうに
       インデントは
    全然関係ありません。
  * ただし途中に空行を入れると
        リストが終わってしまうので
    気をつけてください。

== インデントによる整形済みブロック

インデントすると pre ブロックになります。
(RD / 一部の Wiki 風)

  class C
    def m
      puts 'OK'
    end
  end

== テーブル

表も書けます。行頭を「||」で始め、項目を「||」で区切ってください。
「||」の代わりに「|||」を使うとその右側のコラムは TH エレメントになります。

記述例
{{{
||| 言語     || C    || Ruby || VB
||| 実行速度 || 速い || 遅い || 中程度
||| 開発速度 || 遅い || 早い || ピンキリ
}}}

結果
||| 言語     || C    || Ruby || VB
||| 実行速度 || 速い || 遅い || 中程度
||| 開発速度 || 遅い || 早い || ピンキリ

== Wiki互換文法

「!」を使ったキャプションが使えます。

{{{
記述例
! 見出し
!! 小見出し
}}}

結果
! 見出し
!! 小見出し

Wiki で一般的なリストの文法も使えます。

{{{
記述例

* リスト
** ネストした要素

# 番号付きリスト
## ネストした要素
}}}

結果

* リスト
** ネストした要素

# 番号付きリスト
## ネストした要素

RD スタイルのインデントを使ったリストと混ぜても
なぜかうまくいってしまいますが、当然避けるべきです。

定義リストも使えます。

記述例
{{{
:Alpha: DECの開発したRISC CPU
:Pentium: Intelの開発したCISC CPU
:SPARC: Sunの開発したRISC CPU
}}}

結果
:Alpha: DECの開発したRISC CPU
:Pentium: Intelの開発したCISC CPU
:SPARC: Sunの開発したRISC CPU

== URL自動リンクの例外

URLっぽい文字列は自動的にリンクになりますが、
その際、以下の条件を満たすときに限って末尾の「)」が
URL から除外されます。

  * 末尾が「)」で
  * 丸括弧が URL 内でバランスしていない

URL (URI) の公式規格では「)」は URI 構成文字なので、
厳密には「)」も URI の一部とみなすのが正解です。
しかし自分の過去をふりかえると、
括弧内の最後に URL を書いてハマることがあまりに多いですし、
括弧を URL に使うなんてことは、少なくとも自分の使う範囲では、
まずなかろうと考えたので特別扱いすることにしました。
